import logging
import random
import google.generativeai as genai
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –¢–æ–∫–µ–Ω—ã (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏)
TELEGRAM_BOT_TOKEN = "7449130360:AAFQbDb-lD_W9vwGysj4STdUpc1ADj719ro"
GEMINI_API_KEY = "AIzaSyDZ8n5GAU1SIFVhi8n4nAZHazUtJK6rK6A,"

genai.configure(api_key=GEMINI_API_KEY)
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class GreetingState(StatesGroup):
    waiting_for_name = State()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –°—Ç–∏–ª–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
GREETING_STYLES = ["–ö–ª–∞—Å—Å–∏–∫–∞", "–®—É—Ç–ª–∏–≤–æ–µ", "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ", "–†—ç–ø", "–†–æ–º–∞–Ω—Ç–∏–∫–∞"]

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å")],
        [KeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑")],
        [KeyboardButton(text="üí∞ –ó–∞–±–µ—Ä–∏ 100000$")]
    ],
    resize_keyboard=True
)

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
PRIZES = [
    ("üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1 000 000$!", "https://www.youtube.com/watch?v=dQw4w9WgXcQ"),
    ("üéü –í–∞–º –¥–æ—Å—Ç–∞–ª—Å—è –±–∏–ª–µ—Ç –≤ –∫–∏–Ω–æ!", "https://www.youtube.com/watch?v=dQw4w9WgXcQ"),
    ("üöó –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å!", "https://www.youtube.com/watch?v=dQw4w9WgXcQ"),
    ("üíé –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –∫–ª–∞–¥ —Å –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞–º–∏!", "https://www.youtube.com/watch?v=dQw4w9WgXcQ")
]

async def generate_greeting(name):
    style = random.choice(GREETING_STYLES)
    prompt = f"–°–æ–∑–¥–∞–π {style.lower()} –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å 8 –º–∞—Ä—Ç–∞ –¥–ª—è {name}:"
    try:
        model = genai.GenerativeModel('gemini-1.5-pro')
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini AI: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."

@dp.message(Command("start"))
async def start_command(message: types.Message):
    photo_url = "https://memi.klev.club/uploads/posts/2024-04/memi-klev-club-k6el-p-memi-kot-s-rozoi-1.jpg"
    await message.answer_photo(photo_url, caption="–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ 'üöÄ –ù–∞—á–∞—Ç—å' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=main_keyboard)
    logging.info(f"{message.from_user.id} –Ω–∞–∂–∞–ª /start")

@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å")
async def ask_name(message: types.Message, state: FSMContext):
    logging.info(f"{message.from_user.id} –≤—ã–±—Ä–∞–ª '–ù–∞—á–∞—Ç—å'")
    await state.set_state(GreetingState.waiting_for_name)
    await message.answer("–ö–æ–≥–æ –±—É–¥–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç—å? –í–≤–µ–¥–∏ –∏–º—è:")

@dp.message(GreetingState.waiting_for_name)
async def get_greeting(message: types.Message, state: FSMContext):
    name = message.text
    await message.answer(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {name}...")
    await state.clear()
    logging.info(f"{message.from_user.id} –≤–≤–µ–ª –∏–º—è: {name}")
    greeting = await generate_greeting(name)
    await message.answer(greeting)

@dp.message(F.text == "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑")
async def get_prize(message: types.Message):
    logging.info(f"{message.from_user.id} –≤—ã–±—Ä–∞–ª '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑'")
    prize_text, prize_link = random.choice(PRIZES)
    button = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîó –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", url="https://www.youtube.com/watch?v=dQw4w9WgXcQ")]])
    await message.answer(prize_text, reply_markup=button)

@dp.message(F.text == "üí∞ –ó–∞–±–µ—Ä–∏ 100000$")
async def claim_money(message: types.Message):
    logging.info(f"{message.from_user.id} –≤—ã–±—Ä–∞–ª '–ó–∞–±–µ—Ä–∏ 100000$'")
    button = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è", url="https://www.youtube.com/watch?v=dQw4w9WgXcQ")]])
    await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –≤—ã–∏–≥—Ä—ã—à! üòÜ", reply_markup=button)

@dp.message()
async def log_user_messages(message: types.Message):
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
